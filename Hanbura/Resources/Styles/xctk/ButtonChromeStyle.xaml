<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit">
	<Style TargetType="{x:Type xctk:ButtonChrome}">
		<Setter Property="IsTabStop" Value="False" />
		<Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="{DynamicResource BorderBrushKey}" />
		<Setter Property="Foreground" Value="{DynamicResource ForegroundBrushKey}" />
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type xctk:ButtonChrome}">
					<Grid>
						<Border x:Name="Border"
								BorderThickness="{TemplateBinding BorderThickness}"
								BorderBrush="{TemplateBinding BorderBrush}"
								Background="{TemplateBinding Background}"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch">
							<Grid HorizontalAlignment="Stretch"
								  VerticalAlignment="Stretch">
								<Border x:Name="InnerRect"
									BorderThickness="2"
									Background="Transparent"
									Margin="1"
									HorizontalAlignment="Stretch"
									VerticalAlignment="Stretch" />

								<ContentPresenter Margin="{TemplateBinding Padding}"
										  IsEnabled="{TemplateBinding IsEnabled}"
										  Content="{TemplateBinding Content}"
										  ContentStringFormat="{TemplateBinding ContentStringFormat}"
										  ContentTemplate="{TemplateBinding ContentTemplate}"
										  ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
										  HorizontalAlignment="Center"
										  VerticalAlignment="Center"/>
							</Grid>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>

						<!-- If button is disabled, not checked, and is rendered normal -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="RenderEnabled" Value="False" />
								<Condition Property="RenderChecked" Value="False" />
							</MultiTrigger.Conditions>
							<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrushKey}" />
							<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrushKey}" />
							<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrushKey}" />
						</MultiTrigger>

						<!-- if button is enabled and pressed -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="RenderEnabled" Value="True" />
								<Condition Property="RenderPressed" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Border" Property="Background" Value="{DynamicResource AccentBrushKey}" />
						</MultiTrigger>

						<!-- if button is enabled, is not checked, the mouse is over, and not pressed -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="RenderEnabled" Value="True" />
								<Condition Property="RenderChecked" Value="False" />
								<Condition Property="RenderMouseOver" Value="True" />
								<Condition Property="RenderPressed" Value="False" />
							</MultiTrigger.Conditions>
							<Setter TargetName="InnerRect" Property="Background" Value="{DynamicResource AccentBrushKey}" />
						</MultiTrigger>

						<!-- if button is enabled, checked, he mouse is not over, and it is not pressed -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="RenderEnabled" Value="True" />
								<Condition Property="RenderChecked" Value="True" />
								<Condition Property="RenderMouseOver" Value="False" />
								<Condition Property="RenderPressed" Value="False" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Border" Property="Background" Value="{DynamicResource AccentBrushKey}" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>